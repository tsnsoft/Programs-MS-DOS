
			МЕТОДИЧЕСКИЕ УКАЗАНИЯ

		  к выполнению лабораторной работы #3
		  "Основы работы в среде "EURIKA" "
		  по курсу "Инженерное проектирование и
			       САПР"
		    для	студентов специальности	2103
		   (для	внутривузовского пользования)

	       Как на персональном компьютере решать задачи уровня средней
	 школы (а таких	задач хватает в	деятельности многих дипломированных
	 специалистов),не прибегая к их	кодированию на каком бы	то ни было
	 алгоритмическом языке ? Сегодня это  уже не кажется парадоксом	,
	 посколько в последнее время появилось немало програмных продуктов,
	 созданных именно с такой целью	. Вот названия некоторых из них	:
	 Mathematica, Maple, Theorist, Milo, PowerMath,	MathCAD,  TKSolver,
	 MathLab,MathView Professional...
	       Цель работы - изучение  структуры и получение практических
	 навыков работы	в среде	Eureka.
	       Программное обеспечение является	необходимой составной
	 частью	любой ПЭВМ. Среди программных изделий можно выделить сле-
	 дующие	основные классы:
	       - базовая операционная среда (DOC) и комплекс обслуживающих
	 программ;
	       - базовые системыпрограммирования (компиляторы языков прог-
	 раммирования с	соответствующими библиотеками, сервисным обеспече-
	 нием и	др.);
	       - инструментальные пакеты, которые можно	разделить на спе-
	 циализированные и интегрированные;
	       - прикладные пакеты по различным	областям конкретных прило-
	 жений.
	       Рассматриваемая система EUREKA принадлежит к классу приклад-
	 ных пакетов, характерной чертой которых является ориентация на
	 пользователя-непрограммиста.
	       Система EUREKA предназначена для	решения	систем уравнений и
	 неравенств.
	 Входящая в состав системы EUREKA библиотека функций позволяет вы-
	 числять значения интегралов и производных, находить максимальные
	 и минимальные значения	функций	и т.д.
	       В тексте	и на рисунках сохранены	сокращения, принятые в рус-
	 скоязычной версии системы EUREKA. Ниже	эти сокращения приведены
	 полностью:
	       Вериф.- верификация;
	       Выполнен.- выполнение;
	       Граф.- графика;
	       Загр.- загрузить;
	       Закр.- закрыть;
	       Изм. кат.- изменение каталога;
	       Иск. друг.- искать другое;
	       Интерац.- интерации;
	       Калькул.-калькулятор;
	       Кон.бл.-конец блока;
	       Нач.бл.-начало блока;
	       Нов.-новое задание;
	       Откр.-открыть;
	       Переим.-переименовать;
	       Перемен.-переменная;
	       Пом.-помощь;
	       Прерв.-прервать;
	       Равн.-равномерно;
	       Разм/Сдв.-размер/сдвиг;
	       Расш.-расширить;
	       Ред.-редактировать;
	       Реш.-решение;
	       След.-следующее;
	       Сохр.-сохранить;
	       Спис.-список;
	       Устан.-установить;
	       Черт.-чертить;

	       Интегрированная программная система EUREKA предназначена
	 для решения систем линейных и нелинейных уравнений и неравенств.
	 Кроме того, EUREKA обладает следующими	возможностями:
	       - вычислять значения производных	и определенных интегралов;
	       - осуществлять поиск максимума и	минимума функций;
	       - работать с экспоненциальной, логарифмической, тригономет-
	 рическими функциями, а	также с	полиномами.
	       Используя систему EUREKA	можно выводить на экран	и печатать
	 графики или таблицы значений функций; пересчитывать единицы изме-
	 рений;	создавать отчет	о решенной задаче.
	       Пользователь системы избавлен от	необходимости программи-
	 рования процесса решения задачи. EUREKA требует лишь описания ус-
	 ловия задачи в	форме, максимально приближенной	к привычной записи
	 уравнений и неравенств.
	       Например, задание на решение системы линейных уравнений выг-
	 лядит следующим образом :
	       2*x + 3*y = 10
	       3.7*x - 5.11*y =	17
	       Чтобы обратиться	к системе EUREKA, необходимо перейти в под-
	 каталог, в котором хранятся файлы этой	системы, набрать на клавиа-
	 туре EUREKA и нажать клавишу ENTER.
	       После вызова системы EUREKA на экране монитора появляется
	 изображение, которое делится по горизонтади на	три области:
     ______________________________________________________________________
    │ ┌────────────────────────Еureka: the solver───────────────────────┐ │
    │ │	    File Еdit Solve Commands  Report  Crapn Options Window	│ │
    │ └─────────────────────────────────────────────────────────────────  │
    │ ┌────────Edit───────────────────────┐┌────────Solution────────────┐ │
    │ │	  А: UDODOV. EK	Line 2 Col 1	  ││	С:SOLUTION Line	1	│ │
    │ │	blue + blacr = 138; всего метров  ││ Solution:			│ │
    │ │	5* blue	+ 3* blacr = 540;стоимость││ Variables	  alues		│ │
    │ │					  ││ blacr     = 75.000000	│ │
    │ │					  ││ blur      = 63.000000	│ │
    │ └───────────────────────────────────┘└────────────────────────────┘ │
    │ ╔══════════Report═══════════════════╗┌────── Verify ──────────────┐ │
    │ ║					  ║│				│ │
    │ ║	  A: REPORT. line 3    Col 1	  ║│	C:VERIFV  Line3		│ │
    │ ║	       Задача:			  ║│				│ │
    │ ║	blue + black = 138; всего метров  ║│  Evaluation of formulas	│ │
    │ ║	5* blue	+ 3* blacr = 540;стоимость║│   Forwulas	     Valuas	│ │
    │ ║					  ║│  blue + blacr = 138.000000	│ │
    │ ║					  ║│	  138	   = 138.000000	│ │
    │ ╚═══════════════════════════════════╝└────────────────────────────┘ │
    │	F1 - Help   F5 - Zoom  F6 - Next   F7 -	Goto SCROLL - Sixe/move	  │
    └─────────────────────────────────────────────────────────────────────┘
	       1) меню,	включающее основные режимы работы системы и распо-
	 ложенноев верхней строке экрана;
	       2) группу окон различного назначения, находящуюся в центре
	 экрана;
	       3) поясняющую информацию	о назначении функциональных клавиш,
	 размещенную в нижней строке экрана.
	       Меню содержит следующие указатели режима	работы:
	       - File(Файл) - работа с файлами и каталогами (загрузка,хра-
	 нение и запись	файла; просмотр, изменение каталога и др.);
	       - Edit(Ред.) - редактирование текста условия задачи (созда-
	 ние нового условия задачи, запись его в файл, редактирование ин-
	 формации в существующем файле);
	       - Solve(Реш.) - решение задачи;
	       - Command(Ком.) - набор действий, обеспечивающих	проверку
	 правильности полученного решения, выполнение промежуточных вычис-
	 лений,	продолжение поиска других решений, уточнение полученного
	 решения;
	       - Report(Отчет.)	- создание отчета о решенной задаче;
	       - Graph(Граф.) -	построение и печать графика, вычисление
	 таблицы значений функций;
	       - Options(Опции)	- переопределение параматров среды (точнос-
	 ти методов вычислений;	количества знаков дробной части	числа, вво-
	 димых на экран	и др.);
	       Window(Окно) - работа с окнами (удаление, добавление, акти-
	 визация окон; изменение их взаимного расположения).
	       Выбор режима осуществляется активизацией	меню с помощью кла-
	 виши ESC. Признаком того, что меню активно, является присутствие
	 светового курсора в верхней строке экрана.
	       С помощью клавиш-стрелок	необходимо переместить курсор в
	 нужный	режим и	нажать клавишу ENTER. Если режим предусматривает
	 свое подменю, надо выбрать требуемую команду с	помощью	клавиш уп-
	 равления курсором и нажать ENTER.
	       Переход в нужный	режим возможен также путем нажатия клавиши
	 первой	буквы режима или команды. Например, для	выбора режима Sol-
	 ve(Реш) необходимо нажать клавишу S, а	для выполнения команды Load
	 (Загр.) режима	File(Файл) должны быть последовательно нажаты кла-
	 виши F	и l.
─────────────────────┬───────────────────────────┬─────────────────────────
	   Режим     │	   Команда		 │   Назначение
─────────────────────┼───────────────────────────┼─────────────────────────
	 File	     │	Load(Загр.)		 │ Ввод	задания	из файла в
	(Файл)	     │				 │окно редактирования Edit
		     │				 │(Ред.)
		     │	New(Нов.)		 │ Очистка всех	окон, отк-
		     │				 │рытие	нового файла для
		     │				 │редактирования
		     │	Save(Сохр.)		 │ Сохракнение в текущем
		     │				 │файле	на диске содержи-
		     │				 │мого окна Edit(Ред.)
		     │	Directory(Каталог)	 │ Просмотр содержимого
		     │				 │текущего каталога
		     │	Change dir(Изм.кат.)	 │ Изменение текущего
		     │				 │каталога
		     │	Rename(Переим.)		 │ Переименование текущего
		     │				 │файла
		     │	OS shell (ОС)		 │ Временный выход в ДОС
		     │	Quit(Выход)		 │ Выход из системы Eureka
		     │				 │в ДОС
─────────────────────┼───────────────────────────┼─────────────────────────
	 Edit	     │	       _______		 │ Создание нового файла,
	(Ред.)	     │				 │содержащего условие зада-
		     │				 │чи, или модификация су-
		     │				 │ществующего
─────────────────────┼───────────────────────────┼─────────────────────────
		     │				 │ Решение задачи - нахож-
	 Solve	     │				 │дение	значений всех пе-
	(Реш.)	     │	       _______		 │ременных
		     │				 │
		     │				 │
		     │				 │
─────────────────────┴───────────────────────────┴─────────────────────────
─────────────────────┬───────────────────────────┬─────────────────────────
		     │				 │
	 Command     │	Verify(Вериф.)		 │ Оценка правильности по-
	(Команды)    │				 │лученного решения
		     │	Calculator(Калькул.)	 │ Выполнение промежуточных
		     │				 │вычислений выражений,
		     │				 │вводимых в специальное
		     │				 │окно в процессе решения
		     │				 │задачи
		     │	Find other(Иск.друг.)	 │ Поиск других	решений
		     │	Iterate(Итерац.)	 │ Продолжение итеративного
		     │				 │процесса уточнения полу-
		     │				 │ченного решения
─────────────────────┼───────────────────────────┼─────────────────────────
		     │				 │
	 Report	     │	Go ( ->	)		 │ Печать/запись отчета
	(Отчет)	     │				 │(результатов)	о решенной
		     │				 │задаче
		     │	Output (Вывод)		 │ Задание устройства вы-
		     │				 │вода отчета: Screen(Эк-
		     │				 │ран),	Printer(Принтер),
		     │				 │File(Файл)
		     │	Formated(Формат)	 │ Указание на необходимость
		     │				 │разбивки отчета на стра-
		     │				 │ницы (+/-)
		     │	Capture(Захват)		 │ Сохранение результатов
		     │				 │работы в файле, имя кото-
		     │				 │рого указано в следующей
		     │				 │команде: Log file name
		     │				 │(Имя LOG файла)
		     │	Log file name		 │ Задание имени LOG фай-
		     │ (Имя LOG	файла)		 │ла, в	котором	должен быть
		     │				 │сохранен отчет
─────────────────────┼───────────────────────────┼──────────────────────────
		     │				 │
	 Graph	     │	Plot (Черт.)		 │ Построение графика функ-
	(Граф.)	     │				 │ции, определенной в ко-
		     │				 │манде	Function(Функция)
		     │				 │данного режима
		     │	Output (Вывод)		 │ Задание устройства вы-
		     │				 │вода графика:	Screen(Эк-
		     │				 │ран),	Printer(Принтер),
		     │				 │File(Файл)
		     │	List (Спис.)		 │ Вычисление таблицы зна-
		     │				 │чений	функции, определен-
		     │				 │ной в	команде	Function
		     │				 │данного режима
		     │	Function (Функция)	 │ Определение функции для
		     │				 │построения графика и вы-
		     │				 │числение таблицы значений
─────────────────────┼───────────────────────────┼─────────────────────────
		     │				 │
	 Options     │	Varitables(Перемен.)	 │ Изменение текущих значе-
	 (Опции)     │				 │ний переменных при моди-
		     │				 │фикации условия задачи
		     │	Setting(Установ.)	 │ Задание установочных
		     │				 │значений параметрам, уп-
		     │				 │равляющим процессом ре-
		     │				 │шения	задачи
		     │				 │
		     │				 │
		     │				 │
		     │				 │
		     │	Colors (Цвета)		 │ Установка цвета различ-
		     │				 │ных элементов	экрана:
		     │				 │окон,	фона и др.
		     │	Directories (Каталоги)	 │ Указание каталогов, со-
		     │				 │держащих файлы системы
		     │				 │EUREKA
		     │	Load Setup (Загр.SETUP)	 │ Загрузка ранее сохранен-
		     │				 │ных установочных значений
		     │				 │параметров из	файла
		     │	Write Setup (Сохр.SETUP) │ Сохранение установочных
		     │				 │параметров в файле
─────────────────────┼───────────────────────────┼─────────────────────────
	 Window	     │	Open (Откр.)		 │ Отрытие окна, выбранного
	 (Окно)	     │				 │курсором в подменю данной
		     │				 │команды
		     │	Close (Закр.)		 │ Закрытие активного окна
		     │	Next (След.)		 │ Активизация следующего
		     │				 │окна
		     │	Zoom (Расш.)		 │ Увеличение активного
		     │				 │окна до размеров экрана
		     │	File (Равн.)		 │ Равномерное распределе-
		     │				 │ние открытых окон по эк-
		     │				 │рану
		     │	Stack (Стек)		 │ Расположение	открытых
		     │				 │окон в виде стека
		     │	Goto (Идти)		 │ Переход в активное окно
		     │				 │
─────────────────────┴───────────────────────────┴─────────────────────────


		     ПРАВИЛА ЗАПИСИ УСЛОВИЯ ЗАДАЧИ


	      Текст условия задачи может включать:
	      -	отдельные уравнения или	системы	уравнений и неравенств;
	      -	инициализацию переменных;
	      -	функции, определенные пользователем;
	      -	директивы;
	      -	комментарии.

		      Уравнения	и неравенства
	      Уравнение	(неравенство) в	системе	Eureka записывается в виде
	 двух (или нескольких) выражений, соединенных знаком "=","<" или
	 ">".Например:
	      x=2*cos(y)-6
	      y=2*z-7=g
	      0	< a < 1
	      Выражения	могут включать константы, переменные или функции,
	 связанные знаками алгебраических операций:"-" - вычитание, "+"	-
	 сложение, "*" - умножение, "/"	- деление, "^" - возведение в сте-
	 пень.
	      Имена переменных формеруются последовательностями	букв и
	 цифр, начиная с буквы.	Строчные и прописные буквы различаются.
	      В	одной строке могут быть	записаны несколько уравнений или
	 неравенств, разделенных знаком	";", например:
	      x+2*y ; x>0
	      Текст условия задачи может включать не более 20 уравнений
	 или неравенств.

			   ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

	      Методы решения уравнений в системе Eureka	таковы,	что для
	 всех переменных рекомендуется указывать их приближенные начальные
	 значения, которые в процессе итеративного поиска решения уравне-
	 ния будут уточнятся. Такое задание начальных значений переменных
	 называется инициализацией и записывается с помощью комбинаций сим-
	 волов ":=", например:
	      x:=7.25
	      z:=7.25*6.293^2
	      Запись инициализации переменных отличается от записи уравне-
	 ний тем, что значения,	заданные при инициализации, не остаются
	 неизменными в процессе	решения	задачи.
	      В	строке текста условия задачи может быть	описана	только од-
	 на инициализация переменной.
	      Если инициализация переменной в условии задачи не	задана,
	 Eureka	использует значение, принятое по умолчанию.

			     ФУНКЦИИ

	      Система Eureka позволяет использовать встроенные функции.
	 Аргументами функций могут быть	переменные, константы, выражения.
		     Основные встроенные функции:
─────────────────────┬─────────────────────────────────────────────────────
	Функции	     │			 Назначение
─────────────────────┼─────────────────────────────────────────────────────
		     │
	abc(x)	     │ Возвращает абсолютное значение переменной x
		     │
	cos(x)	     │ Возвращает значение функции cos(x), где х - значение
		     │угла в радианах
		     │
	cosh(x)	     │ Возвращает значение функции cosh(x)
		     │
	deriv(f(x),x)│ Возвращает значение производной функции f(x) от ар-
		     │гумента х, где f(x) - выражение, х - переменная.
		     │Например:	z=deriv(x^3-5+x,x).
		     │
	exp(x)	     │ Возвращает значение ф - ции с
		     │
	fact(n)	     │ Возвращает значение факториала х!, где х<170
		     │
	floor(x)     │ Возвращает значение х, округленное до ближайшего
		     │целого числа слева. Например:
		     │ floor(2.5) возвращает 3.000000
		     │ floor(2.999 + 2.999) возвращает 5.000000
		     │
	frac(x)	     │ Возвращает положительную	дробную	часть числа. Напри-
		     │мер:
		     │frac(2.5)	возвращает 0.500000
	im(x)	     │ Возвращает мнимую часть комплексного числа.Например:
		     │ im(3 + 2*sqrt(-1)) возвращает 2
		     │
	integ(f(x),x,│ Возвращает значение определенного интеграла функции
	lower-bound, │ f аргумента х на	интервале [a,b], где f(x) - выра-
	upper-bound) │жение, х - переменная
		     │
	ln(x)	     │ Возвращает значение натурального	логарифма
		     │
	log(x)	     │ Возвращает значение логарифма по	основанию 10
		     │
	msqrt(x)     │ Возвращает отрицательное	значение квадратного кор-
		     │ня х. Например: msqrt(9) возвращает -3
		     │
	ncum(x)	     │ Возвращает значение вероятности случайной величины
		     │ х, распределенной по нормальному	закону
		     │
	pi()	     │ Возвращает значение числа
		     │
	polar(x,y)   │ Возвращает преобразованное значение угла, выражен-
		     │ного в полярных координатах, в радианы
		     │ Например: polar(-1,0) возвращает	3.1415926
		     │
	poly(x,s,..s)│ Возвращает значения корней полинома, где	s - набор
		     │коэффициентов полинома. Так полиномиальное уравнение
		     │ x^4+3*x^3-x^2+1=0 должно	быть представлено следующим
		     │образом: P(x):= poly(x,1,3,-1,2,1)
		     │
	pos(x)	     │ Возвращает положительное	значение переменной х
		     │
	re(x)	     │ Возвращает действительную часть комплексного числа
		     │х. Например: re(3+2*sqrt(-1)) возвращает 3
		     │
	sgn(x)	     │ Возвращает 1 при	х>=0 и -1 при x<0
		     │
	sin(x)	     │ Возвращает значение функции sin(x), где х - значе-
		     │ние угла в радианах
		     │
	sinh(x)	     │ Возвращает значение функции sinh(x)
		     │
	sqrt(x)	     │ Возвращает положительное	значение квадратного корня
		     │х. Например: sqrt(81) возвращает 9.000000
		     │
	sum(f(x),x,  │ Возвращает значение суммы при целочисленных границах
	first,last)  │интервала	и единичном шаге. Например, обращение к
		     │к	функции	при вычисление суммы, например,	4*x, будет
		     │sum(4*x,x,1,3). Результат	равен 24.
		     │
	tan(x)	     │ Возвращает значение функции tg(x), где х	- значение
		     │угла в радианах
		     │
	tanh(x)	     │ Возвращает значение функции tgh(x)
		     │
		     │

	      Пользователю также предоставлена возможность вводить и опре-
	 делять	собственные функции для	упрощения и сокращения записи вы-
	 ражений, а также для построения графиков функций и вычисления таб-
	 лиц значений.
	      Подобно инициализации переменных описание	функции	осуществля-
	 ется с	использованием обозначения ":=". Отличием от записи инициа-
	 лизации переменных является то, что слева от обозначения ":=" за-
	 писывается имя	функции	с формальными аргументами в скобках, напри-
	 мер:	       f(x,y):=(x^2)/4 + (y^2)/3
		       z(x):=sin(2*x)
	      Имена функций формируются	по тем же правилам, что	и имена	пе-
	 ременных.
	      В	строке может быть описана только одна функция. В тексте
	 условия задачи	может быть описано не более десяти функций, опреде-
	 ленных	пользователем.


			       ДИРЕКТИВЫ

	      Директивы	представляют собой команды, которые осуществляют
	 поиск максимума или минимума функции; переопределяют значения па-
	 раметров управляющих процессом	решения	задачи,	а также	выполняют
	 другие	функции. Директива начинается со знака "$", после которого
	 следует ключевое слово. Например, для изменения заданной точности
	 итеративных методов используется следующая директива:
			 $ accuracy = 1.e-10


			      КОММЕНТАРИИ

	      В	текст условия задачи рекомендуется добавлять комментарии,
	 которые должны	либо следовать после символа ";" до конца строки,
	 либо располагаться в скобках {}. Смешение этих	двух способов не
	 рекомендуется.
	      Общие правила формирования текста	условия	задачи:
	      1. В системе Eureka принят произвольный порядок записи урав-
	 нений,	комментариев, директив,	инициализаций и	определенных поль-
	 зователем функций.
	      2. Игнорируются пробелы в	строках	и пустые строки.
	      3. Символ	подчеркивания означает продолжение формулы на сле-
	 дующей	строке,	например:
			 z=(x-a)^2_
			  *(x-b)^2



		    РЕШЕНИЕ ЗАДАЧ В СИСТЕМЕ EUREKA.


	      Eureka решает задачи на основе итерационных методов. Любая
	 проблема сводится к задаче минимизации, и процесс ее решения сос-
	 тоит в	подборе	таких значений переменных, которые удовлетворяли бы
	 заданным ограничениям,	выраженным уравнениями и неравенствами.
	 Подбор	значений каждой	из переменных начинается с некоторого при-
	 ближения, заданного пользователем или принятого системой по умол-
	 чанию.	Затем следует итеративный процесс его уточнения.
	      Подход, принятый в системе Eureka, позволяет получить в опре-
	 деленный момент времени только	одно значение каждой из	переменных.
	 Для поиска других значений необходимо изменить	область	поиска ре-
	 шений:	задать новые начальные приближения переменных или добавить
	 ограничения на	допустимые значения переменных.	Определить прибли-
	 женные	значения всех возможных	решений	уравнений можно	путем пост-
	 роения	и анализа графиков.
	      Eureka позволяет решать широкий класс задач, которые могут
	 быть представлены уравнениями и неравенствами.	Однако такая уни-
	 версальность имеет свои негативные стороны: методы системы Eureka
	 иногда	приводят к неверным решениям. Поэтому каждое полученное	ре-
	 шение должно быть подвергнуто проверке, для выполнения	которой	в
	 системе предусмотрены специальные средства.
	      Технология решения задач в системе Eureka	обусловлена приня-
	 тыми методами и включает следующие основные этапы:
	      1) описание условия задачи,
	      2) получение решения задачи,
	      3) проверка правильности полученного решения,
	      4) определение и задание новых областей поиска решений,
	      5) получение новых решений задачи,
	      6) оформление результатов	решения	задачи в виде отчета.
	      Рассмотрим эту технологию	на примере решения уравнения
			     x^2 - 5*sin(x) = 0

			ОПИСАНИЕ УСЛОВИЯ ЗАДАЧИ
	      Текст условия задачи может быть создан с помощью любого
	 текстового редактора, в том числе редактора системы Eureka. В
	 первом	случае необходимо созданный текстовой файл загрузить в сис-
	 тему Eureka с помощью команды Load (Загр.) режима File	(Файл).	При
	 выполнении команды Load (Загр.) система запрашивает имя файла,	со-
	 держащего текст условия задачи. После ответа на этот вопрос в окне
	 Edit (Ред.) появится содержимое загруженного файла. Далее этот
	 текст можно редактировать средствами редактора	системы	Eureka.
	      Редактор системы Eureka можно вызвать двумя способами:
	      1) переходом в режим Edit	(Ред.) через главное меню ( с по-
	 мощью курсора или клавиши E);
	      2) с помощью клавиш ALT-E.
	      После вызова редактора курсор перемещается в окно	Edit(Ред.).
	 Для удобства работы окно Edit может быть увеличено до размеров
	 всего экрана с	помощью	клавиши	F5. (Возврат в исходное	состояние
	 осуществляется	повторным нажатием клавиши F5.)
	      В	окне Edit необходимо набрать текст
				 x^2-5*sin(x)=0
	      После этого следует сохранить текст в файле с помощью коман-
	 ды Write to (Писать в ...) режима File	(Файл),	указав в ответ на
	 запрос	имя файла.

		       ПОЛУЧЕНИЕ РЕШЕНИЯ ЗАДАЧИ

	      Для получения решения необходимо перейти в режим Solve (Реш.)
	 либо через главное меню (с помощью курсора или	клавиши	S), либо с
	 помощью клавиш	ALT-F5.
	      Пока Eureka решает задачу, в центре экрана появляется окно
	 Progress (Выполнение).	В этом окне высвечивается время, затрачен-
	 ное на	решение	задачи;	текущее	значение переменной, полученное	на
	 данном	этапе итераций,	и текущее значение ошибки, представляющее
	 собой разность	между правой и левой частями уравнения после под-
	 становки в него текущих значений переменных.
	      Окно Progress позволяет также оценить целесообразность пре-
	 рывания процесса решения задачи, например вследствие неуменьшаю-
	 щейся ошибки. Чтобы прервать процесс решения и	проверить текущие
	 значения переменных, необходимо нажать	одновременно клавиши
	 Ctrl-Break; оценить полученное	значение и возобновить,	если тре-
	 буется, решение с помощью команды Intrate (Итерац.) режима Command
	 (Команды).
	      После завершения итеративного процесса окно Progress исчезает
	 а в окне Solution появляется решение.
	      Помимо решения окно содержит значение максимальной погрешнос-
	 ти вычислений для всех	переменных задачи. В рассматриваемом приме-
	 ре - для единственной переменной x.
	      После получения решения итеративный процесс его уточнения
	 может быть продолжен с	помощью	команды	Interate режима	Command. В
	 результате выполнения этой команды в окне Solution появятся новые
	 значения:
	       Решение:
		   Variables		 Values
		 (Переменные)		(Значения)
		     Х		 =	-2.0000749е-17
		maximum	error is	 1.0000375e-18
			(Максимальная ошибка)



		 ПРОВЕРКА ПРАВИЛЬНОСТИ ПОЛУЧЕННОГО РЕШЕНИЯ

	      Для контроля правильности	полученного решения в системе пре-
	 дусмотрена команда Verify (Вериф.) режима Command. Выполнение этой
	 команды обеспечивает подстановку в уравнение полученного решения
	 и определения разности	между правой и левой частями уравнения.	При
	 выполнении этой команды в окне	Verify появляются результаты под-
	 становки и значение разности, которое подтверждает правильность
	 или ошибочность полученного решения:
	      Evaluation of formulas:
	      (Обработка формул)
	      Formulas				 Values
	      (Формулы)				 (Значения)
	      x^2-5*sin(x)	    =		 1.4725121e-14
	      0			    =		  .0000
	      difference (error)    =		 1.4725121e-14
	      (Разность)
	      Maximum error is			 1.4725121е-14
	      (Максимальная ошибка)

	      Если в результате	выполнения команды Verify (Вериф.) было
	 обнаружено, что полученное решение неверно, например разность рав-
	 на единице, можно предпринять следующие меры:
	      1. Изменить начальные значения переменных	и выполнить команду
	 Find other (Иск.другое) режима	Command	(Команды).
	      2. Изменить заданную точность вычислений и время счета задачи
	 с помощью директив.
	      3. Заменить константы переменными, вводя инициализацию. На-
	 пример, вместо	определенной пользователем функции:
			     f(x):=4.7*exp(2.1*x+1)
	 рекомендуется задавать	следующие выражения:
			     f(x):=A*exp(B*x+C)
			     A:=4.7
			     B:=2.1
			     C:=1


	      ОПРЕДЕЛЕНИЕ И ЗАДАНИЕ НОВЫХ ОБЛАСТЕЙ ПОИСКА РЕШЕНИЙ.


	      При решении любой	задачи Eurika определяет только	один ко-
	 рень или систему корней .Для оценки существования  других корней
	 и их приближенных значений необходимо модифицировать тект или ус-
	 ловие задачи ,	введя функцию и	построить ее график.
	      Для редактирования текта условия задачи необходимо перейти
	 в режим EDIT(РЕД.) и ввести следующие определение функции:
			     f(x):=x 2-5*sin(x)
				f(x)=0
	      Символ ":=" показывает , что f(x)-определенная пользователем
	 функция , а символ "="	задается строгое условие (ограничеие) ,	ко-
	 торое должно быть выполнено при подборе знаяений переменной х .
	      После редактирования необходимо перейти в	режим SOLVE(РЕШ.)
	 и еще раз решить задачу  Следующий шаг-посроение графика функции
	 f(x) .	Для его	выполнения необходим:
	      1) перейти в режим GRAPH (Граф.) ;
	      2) установить место вывода графика на экран(рядом	с командой
	 Оutput(Вывод) должно быть указано Screen (экран)) или на устройст-
	 во печати (рядом с командой Output (Вывод) должно быть	указано
	 Printer(Принтер)). Изменение места вывода графика выполняется ко-
	 мандой	Output (Вывод);
	      3) выполнить команду Plot	(Черт.).
	      Ha экране	поочередно появятся две	рамки с	предложениями вве-
	 сти левую и правую границы интервала построения графика:
	      (Левая граница)
	      Left endpoint value

	      (Правая граница)
	      Right endpoint value

	      После вывода , например ,	значений -3 и 5	для левой и правой
	 границы соответственно	на экране появится окно	Plot (Чeрт.) c
	 изображением графика в	текстовом режиме :
    _______________________________________________________________________
    │ ┌────────────────────────Еureka: the solver───────────────────────┐ │
    │ │	    File Еdit Solve Commands  Report  Crapn Options Window	│ │
    │ └─────────────────────────────────────────────────────────────────  │
    │ ┌────────Edit───────────────────────┐┌────────Solution────────────┐ │
    │ │	  А: UDODOV. EK	Line 2 Col 1	  ││	С:SOLUTION Line	1	│ │
    │ │	blue + ┌───────────────Plot───────┴┴─────────────┐		│ │
    │ │	5* blue│  f	     │				 │alues		│ │
    │ │	       │       31.4 ─┼─				 │5.000000	│ │
    │ │	       │	     │		       .	 │3.000000	│ │
    │ └────────┤	     │		      .		 ├──────────────┘ │
    │ ╔════════╡	     │		     .		 ├──────────────┐ │
    │ ║	       │	     │		   ..		 │		│ │
    │ ║	       │   ...	     │		 ..		 │		│ │
    │ ║	       │      ...    │	      ...		 │		│ │
    │ ║	       │	 ... │	   ...			 │		│ │
    │ ║	       │	    ..	...			 │		│ │
    │ ║	       │ ─┼──────────┼..────────────────┼──────	 │		│ │
    │ ║	       │-3.00	     │		       5.00	 │		│ │
    │ ╚════════╛─────────────────────────────────────────┴──────────────┘ │
    │	F1 - Help   F5 - Zoom  F6 - Next   F7 -	Goto SCROLL - Sixe/move	  │
    └─────────────────────────────────────────────────────────────────────┘

	      Для получения графика в графическом режиме нужно нажать кла-
	 вишу F5. Анализ графика позволяет сделать заключение о	том, что
	 уравнение имеет еще один корень, приближенное значение	которого
	 равно 2. Для выхода из	графического режима достаточно нажать любую
	 клавишу.
	      Чтобы задать новую область поиска	решений,т.е. изменить нача-
	 льное приближение переменной х, нужно перейти в режим Option и
	 выполнить команду Variables (Перемен.). При этом на экране появит-
	 ся рамка, в которой будут указаны текущие значения переменных.	Для
	 задания нового	значения необходимо выбрать курсором нужную пере-
	 менную	и нажать клавишу "Enter" и в появившейся новой рамке ввести
	 значение 2. После повторного нажатия клавиши "Enter" новое значе-
	 ние х заменит предыдущее.



		       ПОЛУЧЕНИЕ НОВЫХ РЕШЕНИЙ ЗАДАЧИ


	      Для продолжения поиска решений необходимо	перейти	в режим
	 Command и выполнить команду Find other	(Иск.друг.).В окне Solution
	 появится новое	значение корня.


		 ОФОРМЛЕНИЕ РЕЗУЛЬТАТОВ	РЕШЕНИЯ	ЗАДАЧИ В ВИДЕ ОТЧЕТА


	      Система Eureka позволяет представить результаты решения зада-
	 чи в виде отчета, который содержит:
	      -	заголовок, включающий дату, время и имя	файла;
	      -	текст условия задачи;
	      -	решение, содержащееся в	окне Solution;
	      -	результаты оценки правильности решения,	содержащиеся в окне
	 Verify	(Вериф.).
	      -	график функции и таблицу значений.

	 Для получения отчета необходимо:
	      1) перейти в режим Report;
	      2) переведя курсор на Output и нажав клавишу "Enter", опре-
	 делить	место вывода отчета ( Screen (Экран) или Printer (принтер))
	      3) указать необходимость форматирования(разбивки на страницы)
	 отчета	("Format+") или	его отмены ("Format-");
	      4) выполнить команду Go( -> ).
	      Текст отчета, находящийся	в окне Report (Отчет), удобно прос-
	 матривать, увеличив это окно до размеров экрана с помощью клавиши
	 F5 .


		 4. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ СИСТЕМЫ EUREKA.

		    Вычисления таблицы значений	функции
	      Для вычисления таблицы значений функции на заданном интервале
	 в системе Eureka предусмотрена	команда	List (Спис.) режима Graph
	 (Граф.). При выполнении этой команды на экране	последовательно	по-
	 являются три рамки, в которых необходимо указать значение аргумен-
	 та, его приращение и требуемое	количество значений функции:
			 (Первая точка)
			  first	point
			 (Приращение)
			  incrementat
		       (Количество значений)
			  number of value
	      После выполнения команды на экране появляется окно List ,ко-
	 торое содержит	таблицу	значений функции. Эту таблицу также можно
	 просмотреть, увеличив ее до размеров экрана с помощью клавиши F5.

    _______________________________________________________________________
    │ ┌────────────────────────Еureka: the solver───────────────────────┐ │
    │ │	    File Еdit Solve Commands  Report  Crapn Options Window	│ │
    │ └─────────────────────────────────────────────────────────────────  │
    │ ┌────────Edit───────────────────────┐┌────────Solution────────────┐ │
    │ │	  А: UDODOV. EK	Line 2 Col 1	  ││	С:SOLUTION Line	1	│ │
    │ │	blue + ┌───────────────Plot───────┴┴─────────────┐		│ │
    │ │	5* blue│  f	     │				 │alues		│ │
    │ │	       │       31.4 ─┼─		  ┌────────────List─────────────┴┐│
    │ │	       │	     │		  │   A:LIST	      Стр.1	 ││
    │ └────────┤	     │		  │				 ││
    │ ╔════════╡	     │		  │ Список значения функции.	 ││
    │ ║	       │	     │		  │ f				 ││
    │ ║	       │   ...	     │		 .│				 ││
    │ ║	       │      ...    │	      ... │	 х	       f(x)	 ││
    │ ║	       │	 ... │	   ...	  │  .00000000	    .00000000	 ││
    │ ║	       │	    ..	...	  │  .10000000	   -.48916708	 ││
    │ ║	       │ ─┼──────────┼..──────────┤  .20000000	   -.88734587	 ││
    │ ║	       │-3.00	     │		  └──────────────┬──────────────┬┘│
    │ ╚════════╛─────────────────────────────────────────┴──────────────┘ │
    │	F1 - Help   F5 - Zoom  F6 - Next   F7 -	Goto SCROLL - Sixe/move	  │
    └─────────────────────────────────────────────────────────────────────┘

		 Анализ	функции, не описанных в	условии	задачи

	     Eurika позваляет анализировать функции, не	описанные в условии
	 задачи. Для задания такой функции, например g(x)=x*sin(x), необхо-
	 димо перейти в	режим Graph(Граф.), выполнить команду Function (Функ-
	 ция) и	описать	функцию	следующим образом :
			     (Введите функцию)
			      enter function
				  g(x)
			     (Определение функции)
			       enter definition
				 x*sin(x)
	      В	дальнейшем при выполнении команд Plot(Черт.) и list(Спис.)
	 будет использоваться заданная в команде Function функция g(x).

		       Использование калькулятора
	      Система Eureka позволяет выполнить в процессе решения задачи
	 промежуточные расчеты с помощью команды Calculator (Калькул.) ре-
	 жима Command (Команды). Это избавляет от необходимости	создания
	 нового	файла для выполнения каких-либо	промежуточных вычислений,
	 потреьовавшихся в ходе	подготовки или решения основной	задачи.
	      При выполнении команды Calculator	(Калькулятор) на экране
	 появляется окно, в котором нужно набрать выражение для	расчета,
	 например:
	      10*exp(x)-7
	      Переменные, фигурирующие в выражении, имеют те значения, ко-
	 торые были получены в результате решения уравнений. После нажатия
	 клавиши Enter в окне Calculator появляется значение вычисленного
	 выражения.
			  Использование	директив

	      Для решения задач	в системе Eureka должны	быть заданы такие
	 параметры, как	точность итеративных методов, время решения задачи,
	 количество цифр в дробной части числа,	выводимых на экран, и др.
	 Значение этих параметров при запуске системы задаются по умолчанию
	 и могут быть изменены при выполнении команды Setting (Установ.)
	 режима	Option (Опции),	а так же с помощью директив.
	      Директивы	размещаются в условия задачи и начинаются со знака
	 "$". Так, директиву, задающую точность	вычислений, следует запи-
	 сать так:
	      $accuracy=0.00001
	      Кроме того, спомощью директив записывают задания на поиск	ми-
	 нимального значения функции. Для этого	необходимо задать функцию;
	 уравнение, связывающее	некоторую переменную и данную функцию, а
	 так же	директиву, минимизирующую (максимизирующую) значение этой
	 переменной. Например:
	      f(x):=4*x+2*x^2-3
	      p=f(x)
	      $min(p)

    ────────────┬─────────────────┬───────────┬────────────────────────────
     Параметр	│Возможные	  │Значение по│	      Назначение
		│ значения	  │умолчанию  │
    ────────────┼─────────────────┼───────────┼────────────────────────────
     Listdefault│   Yes/No	  │   No      │	No оэначает, что команда
		│		  │	      │	List берет аргументы из	от-
		│		  │	      │	ветов пользователя на за-
		│		  │	      │	просы системы, а не из ус-
		│		  │	      │	тановок
    ────────────┼─────────────────┼───────────┼────────────────────────────
    List-first	│Любое отрицатель-│ 0.000000  │	Устанавливается	начальное
		│ное или положи-  │	      │	значение аргумента функции
		│тельное число	  │	      │	при вычислении таблицы ее
		│		  │	      │	значений, если listdefault-
		│		  │	      │	-yes
    ────────────┼─────────────────┼───────────┼────────────────────────────
    List-inc	│Любое отрицатель-│ 0.500000  │	Устанавливает шаг прираще-
		│ное или положи-  │	      │	ния аргумента функции при
		│тельное число	  │	      │	вычислении таблицы ее зна-
		│		  │	      │	чений, если listdefault-yes
    ────────────┼─────────────────┼───────────┼────────────────────────────
    List-num	│Положительное це-│    10     │	Устанавливает число значе-
		│лое число	  │	      │	ний функции при	вычислении
		│		  │	      │	таблицы	ее значений, если
		│		  │	      │	listdefault - yes
    ────────────┼─────────────────┼───────────┼────────────────────────────
    Plotdefault	│     Yes/No	  │    No     │	No означает, что границы
		│		  │	      │	графика	устанавливаются	из
		│		  │	      │	ответов	пользователя на	за-
		│		  │	      │	прос системы,а не из устан.
    ────────────┼─────────────────┼───────────┼────────────────────────────
    Plot-left	│Любое + или -	  │ 0.000000  │	Левая гран. интер. для
		│число		  │	      │	постр. граф., при plotdef.+
    ────────────┼─────────────────┼───────────┼────────────────────────────
    Plot-right	│Любое отрицатель-│ 10.000000 │Правая граница интервала	для
		│ное или положи-  │	      │построения графика, если
		│тельное число	  │	      │	plotdefault - yes
		│		  │	      │
		│		  │	      │

	      Директива	$min ($max) может быть использована в тексте усло-
	 вия задачи только один	раз. Не	допускается использование одновре-
	 менно директивы $max и	$min в одном тексте условия задачи.
		      Директивы	системы	Eureka
    ───────────────────────┬───────────┬───────────────────────────────────
     Директива,	пример	   │значение по│	  назначение
     ее	записи		   │умолчанию  │
    ───────────────────────┼───────────┼───────────────────────────────────
     $accuracy=<значение>  │ 1.0e-7    │ Задает	точность, определяющую за-
     $accuracy=1.0e-10	   │	       │ вершение итеративного процесса
			   │	       │ поиска	решения
    ───────────────────────┼───────────┼───────────────────────────────────
     $casefold=<yes/no>	   │	no     │ Позволяет считать строчные и про-
     $casefold=	yes	   │	       │ писные	буквы тождественными
    ───────────────────────┼───────────┼───────────────────────────────────
     $complex=<yes/no>	   │	no     │ Задает	все переменные комплексными
    ───────────────────────┼───────────┼───────────────────────────────────
     $digits=<целое:1..13> │	 8     │ Устанавливает число вводимых цифр
     $ditits=10		   │	       │ и не влияет на	расчеты
    ───────────────────────┼───────────┼───────────────────────────────────
     $include=<имя файла>  │	 -     │ Подключает второй файл	к первому
     $include=file1.txt	   │	       │ (исходному)
    ───────────────────────┼───────────┼───────────────────────────────────
     $initval=<значение>   │	 1     │ Устанавливает начальные значения
     $initval=2.5	   │	       │ переменных
    ───────────────────────┼───────────┼───────────────────────────────────
     $listdefault=<yes/no> │	no     │ Позволяет изменить значения для
			   │	       │ команды List режима Graph, задан-
			   │	       │ ные по	умолчанию. Если	в директиве
			   │	       │ указано значение No, то при выпол-
			   │	       │ нении этой команды в ответ на за-
			   │	       │ прос нужно указать для	вычисляемой
			   │	       │таблицы	значений начальные значения
			   │	       │ аргумента, приращение аргумента,
			   │	       │ число значений	в таблицы
    ───────────────────────┼───────────┼───────────────────────────────────
     $max(имя переменной)  │	 -     │ Поиск максимального значения пере-
     $max(p)		   │	       │ менной
    ───────────────────────┼───────────┼───────────────────────────────────
     $maxtime(положительное│	200    │ Задает	ограничение на время вычис-
     целое)		   │	       │ лений в секундах
     $maxtime(400)	   │	       │
    ───────────────────────┼───────────┼───────────────────────────────────
     $min(имя переменной)  │	 -     │ Поиск минимального значения пере-
     $min(p)		   │	       │ менной
    ───────────────────────┴───────────┴───────────────────────────────────


			   Работа с окнами.
	      В	процессе решения задачи	у пользователя возникает необходи-
	 мость удалять некоторые окна с	экрана,	например List или Report,
	 добавлять их по мере необходимости, а так же изменять их взаимное
	 расположение и	внешний	вид. Такую возможность обеспечивают режим
	 Window	и клавиша Scroll Lock.
	      Команды режима Window (Окно), перечисленные в табл.1, позво-
	 ляют добавлять	и удалять окна,	активизировать и увеличивать их	до
	 размеров экрана, располагать окна равномерно или в виде стека,	а
	 также переходить в открытое окно.
	     Клавиша Scroll Lock позволяет перейти в режим, в котором мож-
	 но перемещать активное	окно, а	также изменять его размеры. Для	ра-
	 боты в	этом режиме необходимо следующее:
	      1) войти в нужное	окно (с	помощью	клавиши	F6 или F7);
	      2) нажать	клавишу	Scroll Lock;
	      3) используя клавиши управления курсором,	переместить окно в
	 требуемое положение;
	      4) используя дополнительные клавиши управления курсороми кла-
	 вишу SHIFT, изменить размеры окна.
	      Для выхода из режима следует повторно нажать клавишу Scroll
	 Lock.


		    ПРИМЕРЫ РЕШЕНИЯ ТИПОВЫХ ЗАДАЧ
			  В СИСТЕМЕ EUREKA


	      С	помощью	системы	Eureka можно решать разнообразные задачи, в
	 которых установлена аналитическая зависимость между неизвестными
	 параметрами. Ниже рассмотрены примеры решения таких задач из раз-
	 личных	областей деятельности человека.	В примерах приведены рас-
	 печатки отчетов системы Eureka, имеющие следующую структуру. Пос-
	 ле заголовка отчета, содержащего дату и время решения,	а также	не-
	 которую дополнительную	информацию, следует раздел описания задания
	 в том виде, в котором оно набрано в окне редактирования. За ним
	 следует раздел	решения	задачи,	в котором указываются найденные
	 значения неизвестеых и	дополнительная информация, характеризующая
	 качество полученного решения.
	      Одним из классов решаемых	задач являются задачи, математичес-
	 кую модель которых можно описать в виде системы уравнений.
	      Пример 1.Найти значения неизвестных для следующей	системы	ли-
	 нейных	уравнений:
			 X1 +X2+X3= 6
			 X1    -X3=-2
			 X1+2X2+X3= 8
	 ***************************************************************
	 Eureka: The Solver, Version 1.0
	 Friday	June 19, 1992, 12:32 am.
	 Name of input file: NONAME
	 ***************************************************************

	   Описание системы линейных алгебраических уравнений
		     х1	 +  х2	+  х3  =   6
		     х1		-  х3  =  -2
		     х1	 +2*х2	+  х3  =   8

	 ***************************************************************

	 Solution:

	  Variables    Values

	   x1	    =  1.0000000
	   x2	    =  2.0000000
	   x3	    =  3.0000000
	 ***************************************************************

	      Пример 2.	Найти значения неизвестных для системы нелинейных
	 уравнений
			0.6*х +	7.5*y +	x^2*y =	0
			cos(y) + 6*x = 0

	 ***************************************************************
	 Eureka: The Solver, Version 1.0
	 Friday	June 19, 1992, 12:55 am.
	 Name of input file: NONAME
	 ***************************************************************


	  ;   описание системы нелинейных уравнений

	      0.6*x   +	  7.5*y	  +   x^2*y   =	  0
	      cos(y)  +	    6*x		      =	  0

	 ***************************************************************

	 Solution:

	  Variables    Values

	  x	    =  -.16655696
	  y	    =	.13282970
	 Maximum error is 1.7763568e-15
	 ***************************************************************

	      В	систему	могут входить уравнения, предусматривающие вычис-
	 ление значений	интегралов и дифференциалов.
	      Пример 3.	Найти значение неизвестных системы интегрально-диф-
	 ференциальных уравнений
		   4x +	tg(xy) + dF(x)/dx = 0

		   (y^2	- 9)^2 + ln(x) +   (F(x)dx) =0,

	      для функции F(x) = sin(x)*ln(x).

	 ***************************************************************
	 Eureka: The Solver, Version 1.0
	 Friday	June 19, 1992, 12:55 am.
	 Name of input file: NONAME
	 ***************************************************************

	      Описание системы интегрально-дифференциальных уравнений
	      F(x):=SIN(X)*LN(X)
	      4*X   +	TAN(X*Y)   +   DERIV(F(X),X)   =   0
	     (Y^2  -  9)^2 + LN(X) + INTEG(F(X),X,1,2)	=  0

	 ***************************************************************

	 Solution:

	  Variables    Values

	    X	    =  .13861775
	    Y	    = 2.78663455

	 Maximum error is 1.7763568e-15

	 ***************************************************************

	      С	помошью	системы	Eureka могут быть вычислены значения про-
	 изводных n-го порядка в точке и значения кратных интегралов.
	      Пример 4.	Вычислчть значение определенного интеграла
				   	   
		      F=Ї(cos(z) * Ї(x^3 * Ї(t	dt)  dx)  dz)
			ї	   ї	   ї
		       -	  -	  -
	 и определить значение производной четвертого порядка
		      F=d/dx(d/dx(d/dx(d(x^3-x^4+1)/dx)))
	 в точке x=30
	 ***************************************************************
	 Eureka: The Solver, Version 1.0
	 Friday	June 19, 1992, 12:55 am.
	 Name of input file: NONAME
	 ***************************************************************
	 F=integ(cos(z)*integ((x^3)*integ(t,t,_
	 -3.14,3.14),x,-3.14,3.14)_
	 ,z,-3.14,3.14)
	 x=30
	 F1=deriv(deriv(deriv(deriv(x^3-x^4+1,x),x),x),x)
	 ***************************************************************
	 Solution:
	  Variables    Values

	   F	      =	2.9776561e-33
	   F1	      =	   -24.000000
	   x	      =	    30.000000
	 ***************************************************************

	      Часто встречающимися задачами являются задачи поиска
	 экстремумов функции. Для их решения в задании необходимо описать
	 исследуемую функцию, присвоить	какой-либо переменной значение
	 зтой функции и	указать	директиву $max($min) для поиска	максимума
	 (минимума) значения данной переменной.
	      Пример 5.	Найти минимум функции

		       F(x1,x2)=e^(x1^2+x2^2)+2*x1-3.5*x2

	 ***************************************************************
	 Eureka: The Solver, Version 1.0
	 Friday	June 19, 1992, 12:55 am.
	 Name of input file: NONAME
	 ***************************************************************
		       Минимизировать функцию
	      F(X1,X2):=EXP(X1^2+X2^2)+2*X1-3.5*X2
	      FZ=F(X1,X2)
	      $MIN(FZ)
	 ***************************************************************

	 Solution:

	  Variables    Values
	      FZ    =  -1.3801562
	      X1    =	-.4427634
	      X2    =	 .7854634
	      Уровень доверия 98.7%
	      Все ограничения удовлетв.
	 ***************************************************************
	      Следует заметить,	что для	некоторых функций результатом может
	 являтся значение локального экстремума. Такие функции удобно ис-
	 следовать путем предварительного построения графика функции для
	 определения диапазона поиска значений экстремума. Дополнительная
	 информация в разделе решения может свидетельствовать об окончании
	 решения задачи.
	      С	помощью	системы	Eureka можно решать задачи линейного прог-
	 раммирования.
	      Пример 6.	Найти максимальное значение линейной формы (целевой
	 функции) вида F(x1,x2,x3,x4)=10*x1-x2-9*x3-8*x4 при следующей
	 системе ограничений:
		   -2*x1 + x2 +	3*x3 + x4 = 2,
		   -5*x1 + 2*x2	+ 3*x4 = 5,
		   7*x1	- 4*x2 + x3 + 4*x4 <= 1,
		   3*x1	+ 2*x2 + 5*x3 +	6*x4 <=	10.
	 ***************************************************************
	 Eureka: The Solver, Version 1.0
	 Friday	June 19, 1992, 12:55 am.
	 Name of input file: NONAME
	 ***************************************************************
	  F(x1,x2,x3,x4)=10*x1-x2-9*x3-8*x4
		   -2*x1 + x2 +	3*x3 + x4 = 2
		   -5*x1 + 2*x2	+ 3*x4 = 5
		   7*x1	- 4*x2 + x3 + 4*x4 <= 1
		   3*x1	+ 2*x2 + 5*x3 +	6*x4 <=	10
	  FZ=F(X1,X2,X3,X4)
	  $MAX(FZ)
	 ***************************************************************

	 Solution:

	  Variables    Values
	    FZ	    = 7.8364537e+30
	    X1	    =-4.8798612e+28
	    X2	    = 1.4375463e+30
	    X3	    =-1.6505635e+29
	    X4	    =-1.0352735e+30
	      Уровень доверия 98.7%
	      Все ограничения удовлетв.
	 ***************************************************************
	      Не каждая	задача этого класса имеет решение. Поэтому в виде
	 дополнительной	информоции система Eureka сообщает о ваполнении	ог-
	 раничений и степени доверия к найденному решению. Задачи поиска
	 экстремума могут возникать при	выполнении конструкторских работ.
	      Качество решения можно повысить, если проверить результат,
	 используя двойственную	задачу или выбирая мультипликативную целе-
	 вую функцию. При решении задачи удобно	иметь в	задании	записи раз-
	 личных	вариантов поиска решения, отмечая неиспользуемые как ком-
	 ментарии.
	 Область применения системы Eureka не ограничивается приведеннвми
	 примерами.
